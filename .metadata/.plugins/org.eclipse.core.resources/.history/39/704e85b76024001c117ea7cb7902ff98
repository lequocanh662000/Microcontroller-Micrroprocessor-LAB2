#include "main.h"
#include "led7_display.h"
TIM_HandleTypeDef htim2;


void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);

int timer0_counter = 0;
int timer1_counter = 0;
int timer0_flag = 0;
int timer1_flag = 0;
int TIMER_CYCLE = 10;
void setTimer0and1(int duration){
	timer0_counter = duration /TIMER_CYCLE;
	timer1_counter = 50;
	timer0_flag = 0;
	timer1_flag = 0;
}

void timer_run(){
	if(timer0_counter > 0)timer0_counter--;
	if(timer1_counter > 0)timer1_counter--;

	if(timer0_counter == 0){
		timer0_flag = 1;
	}
	if(timer1_counter == 0){
		timer1_flag = 1;
		timer1_counter = 50;
	}else{
		timer1_flag = 0;
	}
}

int main(void)
{
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_TIM2_Init();

  HAL_TIM_Base_Start_IT(&htim2);
  initialclock();
  int hour = 15, min = 8, sec = 50;
  int led_index = 0;
  setTimer0(1000);
  updateClockBuffer(hour, min);
  while (1)
  {
	 // Toggle PA5 led and 2-led
		if(timer0_flag == 1){
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
		  	  sec++;
		      if(sec >= 60){
		      	sec = 0;
		      	min++;
		      }
		      if(min >= 60){
		      	min = 0;
		      	hour++;
		      }
		      if(hour >= 24){
		      	hour = 0;
		      }
		      updateClockBuffer(hour, min);
		      setTimer0(2000);
		}

		if(timer1_flag == 1){
			if(led_index == 2){
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
			}
			update7SEG(led_index++);
		}
		if(led_index == 4)led_index = 0;

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 7999;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 9;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
int led_buffer[4] = {0, 0, 0, 0};
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	timer_run();
}

void update7SEG(int index){
	switch(index){
		case 0:
			HAL_GPIO_WritePin(ENABLE_7SEG_1_PORT, ENABLE_7SEG_1 , RESET);
			HAL_GPIO_WritePin(ENABLE_7SEG_2_PORT, ENABLE_7SEG_2 , SET);
			HAL_GPIO_WritePin(ENABLE_7SEG_3_PORT, ENABLE_7SEG_3 , SET);
			HAL_GPIO_WritePin(ENABLE_7SEG_4_PORT, ENABLE_7SEG_4 , SET);
			display7SEG(led_buffer[0]);
			break;
		case 1:
			HAL_GPIO_WritePin(ENABLE_7SEG_1_PORT, ENABLE_7SEG_1 , SET);
			HAL_GPIO_WritePin(ENABLE_7SEG_2_PORT, ENABLE_7SEG_2 , RESET);
			HAL_GPIO_WritePin(ENABLE_7SEG_3_PORT, ENABLE_7SEG_3 , SET);
			HAL_GPIO_WritePin(ENABLE_7SEG_4_PORT, ENABLE_7SEG_4 , SET);
			display7SEG(led_buffer[1]);
			break;
		case 2:
			HAL_GPIO_WritePin(ENABLE_7SEG_1_PORT, ENABLE_7SEG_1 , SET);
			HAL_GPIO_WritePin(ENABLE_7SEG_2_PORT, ENABLE_7SEG_2 , SET);
			HAL_GPIO_WritePin(ENABLE_7SEG_3_PORT, ENABLE_7SEG_3 , RESET);
			HAL_GPIO_WritePin(ENABLE_7SEG_4_PORT, ENABLE_7SEG_4 , SET);
			display7SEG(led_buffer[2]);
			break;
		case 3:
			HAL_GPIO_WritePin(ENABLE_7SEG_1_PORT, ENABLE_7SEG_1 , SET);
			HAL_GPIO_WritePin(ENABLE_7SEG_2_PORT, ENABLE_7SEG_2 , SET);
			HAL_GPIO_WritePin(ENABLE_7SEG_3_PORT, ENABLE_7SEG_3 , SET);
			HAL_GPIO_WritePin(ENABLE_7SEG_4_PORT, ENABLE_7SEG_4 , RESET);
			display7SEG(led_buffer[3]);
			break;
		default:
			break;
	}
}

void updateClockBuffer(int hour, int min){
	led_buffer[0] = hour/10;
	led_buffer[1] = hour%10;
	led_buffer[2] = min/10;
	led_buffer[3] = min%10;
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
